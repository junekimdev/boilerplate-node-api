openapi: 3.0.3
info:
  title: MY GREATE API
  version: 1.0.0
  contact:
    email: my-email@mycompany.com
  license:
    name: UNLICENSED
    url: https://MY_COMPANY.COM/LICENSE
servers:
  - url: http://localhost:3000/api/v1
    description: Development server
  - url: https://MY_COMPANY.COM/api/v1
    description: Production server
tags:
  - name: AuthAPI
    description: Authorization API
  - name: PushAPI
    description: Push Notification API
paths:
  /auth/user:
    post:
      tags:
        - AuthAPI
      summary: Create a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIdentity'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                properties:
                  user_id:
                    type: integer
                    example: 1
        400:
          $ref: '#/components/responses/400'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'
    get:
      tags:
        - AuthAPI
      summary: Read user info
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoRes'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    put:
      tags:
        - AuthAPI
      summary: Update user info
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfoReq'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    delete:
      tags:
        - AuthAPI
      summary: Delete a user
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  user_id:
                    type: integer
                    example: 1
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /auth/user/pass:
    put:
      tags:
        - AuthAPI
      summary: Update password of a user
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                password:
                  type: string
                  example: good#password
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /admin/auth/role:
    post:
      tags:
        - AuthAPI
      summary: Create a role
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleIdentityReq'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                properties:
                  role_id:
                    type: integer
                    example: 1
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    get:
      tags:
        - AuthAPI
      summary: Read a role
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                role_name:
                  type: string
                  example: user1
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleIdentityRes'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /admin/auth/user/role:
    put:
      tags:
        - AuthAPI
      summary: Update role of a user
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRole'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /auth/token:
    post:
      tags:
        - AuthAPI
      summary: Get an access token
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceIdentity'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
  /auth/refresh:
    post:
      tags:
        - AuthAPI
      summary: Get an access token with refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                refresh_token:
                  type: string
                  example: abcdefghijkl.abcdefghijkl.abcdefghijkl
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
  /push/key:
    get:
      tags:
        - PushAPI
      summary: Get VAPID public key
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  key:
                    type: string
                    example: abcdefghijkl
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /push/register:
    post:
      tags:
        - PushAPI
      summary: Save the PushSubscription
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PushSubscription'
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /push/send:
    post:
      tags:
        - PushAPI
      summary: Send push notification
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PushNotification'
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: 'Bearer JWT'
  schemas:
    ResPermission:
      type: object
      required:
        - res_name
        - readble
        - writable
      properties:
        res_name:
          type: string
          example: resource1
        readble:
          type: boolean
          example: true
        writable:
          type: boolean
          example: false
    RoleIdentityReq:
      type: object
      required:
        - role_name
        - permissions
      properties:
        role_name:
          type: string
          example: user1
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/ResPermission'
          uniqueItems: true
    RoleIdentityRes:
      type: object
      required:
        - role_name
        - permissions
      properties:
        role_name:
          type: string
          example: user1
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/ResPermission'
          uniqueItems: true
        created_at:
          type: string
          format: date
          example: '2023-01-01T11:11:11.111Z'
    UserIdentity:
      type: object
      required:
        - email
        - password
        - role_name
      properties:
        email:
          type: string
          format: email
          maximum: 50
          example: user@example.com
        password:
          type: string
          minimum: 1
          example: pa$$w@rd
        role_name:
          type: string
          example: user1
        surname:
          type: string
          example: Smith
        given_name:
          type: string
          example: James
    DeviceIdentity:
      type: object
      required:
        - device
      properties:
        device:
          type: string
          example: device_uuid
    UserInfoRes:
      type: object
      properties:
        id:
          type: number
          minimum: 1
          example: 1
        email:
          type: string
          example: 'my-email@mycompany.com'
        surname:
          type: string
          example: 'Smith'
        given_name:
          type: string
          example: 'James'
        role_name:
          type: string
          example: 'user1'
        last_login:
          type: string
          format: date
          example: '2023-01-01T11:11:11.111Z'
        created_at:
          type: string
          format: date
          example: '2023-01-01T11:11:11.111Z'
    UserInfoReq:
      type: object
      properties:
        surname:
          type: string
          example: 'Smith'
        given_name:
          type: string
          example: 'James'
    UserRole:
      type: object
      required:
        - role_name
      properties:
        user_id:
          description: if obmitted, token owner's id is applied
          type: number
          example: 1
        role_name:
          type: string
          example: admin1
    Tokens:
      type: object
      required:
        - access_token
        - refresh_token
      properties:
        access_token:
          type: string
          example: abcdefghijkl.abcdefghijkl.abcdefghijkl
        refresh_token:
          type: string
          example: abcdefghijkl.abcdefghijkl.abcdefghijkl
    PushSubscription:
      type: object
      required:
        - topic
        - subscription
      properties:
        topic:
          type: string
          example: myapp_marketing
        subscription:
          type: object
          required:
            - endpoint
            - keys
          properties:
            endpoint:
              type: string
              format: uri
              example: http://push.endpoint@provider.io
            keys:
              type: object
              required:
                - p256dh
                - auth
              properties:
                p256dh:
                  type: string
                  example: abcdefghijkl
                auth:
                  type: string
                  example: abcdefghijkl
    PushNotification:
      type: object
      required:
        - topic
        - payload
      properties:
        topic:
          type: string
          example: myapp_marketing
        payload:
          type: object
          example: { 'message': 'Hello, world!!' }
  responses:
    200:
      description: OK
    201:
      description: Created
    202:
      description: Accepted
    204:
      description: No Content
    400:
      description: Bad Request
    401:
      description: Unauthorized
      headers:
        WWW_Authenticate:
          schema:
            type: string
    403:
      description: Forbidden
    404:
      description: Not Found
    405:
      description: Method Not Allowed
    406:
      description: Not Acceptable
    407:
      description: Proxy Authentication Required
    408:
      description: Request Timeout
    409:
      description: Conflict
    413:
      description: Payload Too Large
    415:
      description: Unsupported Media Type
    417:
      description: Expectation Failed
    422:
      description: Unprocessable Entity
    500:
      description: Internal Server Error
    503:
      description: Service Unavailable
